@page "/"

@inject OpenCriticService OpenCriticAPI;

@using OpenCriticApp.Models

<style>
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        padding: 20px;
        justify-content: flex-start;
    }

    a {
        list-style-type: none;
        text-decoration: none;
        color: black;
        transition: color 0.3s ease
    }

        a:hover {
            color: #666;
        }

    .critic-score {
        margin-top: auto;
        font-weight: normal;
        font-size: 1rem;
        color: #666;
    }

        .critic-score .score {
            font-weight: bold;
            font-size: 1.2rem;
            color: black;
        }

    .game-info {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        gap: 10px;
        flex-grow: 1;
    }

    .game-card {
        display: flex;
        flex-direction: row;
        width: 100%;
        max-width: 700px;
        border: 1px solid lightgray;
        border-radius: 8px;
        padding: 16px;
        background-color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* animation */
    }

    .game-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

    .game-image {
        width: 120px;
        height: auto;
        border-radius: 8px;
        margin-right: 16px;
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* animation */
    }

    .platforms {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: flex-end;
        margin-left: 20px;
    }

    .platform-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        justify-content: flex-end; /* platforms are still messy */
    }

    .platform-item {
        background-color: #f1f1f1;
        padding: 5px 10px;
        border-radius: 20px;
        border: 1px solid #ccc;
        font-size: small;
        color: #333;
    }

    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .search-bar {
        width: 100%;
        max-width: 400px;
        padding: 12px 20px; 
        border-radius: 8px;
        border: 1px solid #ccc;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

    .search-bar:focus {
        border-color: #007BFF;
        outline: none;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .autocomplete-dropdown {
        margin: auto;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: white;
        width: 100%;
        max-width: 400px;
    }

    .autocomplete-item {
        list-style-type: none;
        padding: 8px 12px;
        cursor: pointer;
        background-color: white;
    }

    .autocomplete-item:hover {
        background-color: whitesmoke;
    }

    .autocomplete-item:active {
        background-color: darkgray;
    }

    .pagination-controls {
        display: flex;
        gap: 5px;
        justify-content: center;
        align-items: center;
        margin-right: 5px;
        margin-top: 20px;
        margin-bottom: 1em;
    }

    .pagination-controls button {
        background-color: #f1f1f1;
        padding: 5px 10px;
        border-radius: 20px;
        border: 1px solid #ccc;
        font-size: small;
        color: #333;
    }

    .pagination-controls button:hover {
        background-color: #666;
        color: white;
    }

    .pagination-controls button:disabled {
        background-color: #111;
        color: white;
        opacity: 30%;
    }
</style>

<h1 class="text-center">Current Trending Games on OpenCritic</h1>
<div class="search-container">
    <input class="search-bar" type="text" @oninput="OnSearchChanged" value="@searchTerm" placeholder="Search for a game..." />
</div>

@if (loading)
{
    <p>Fetching data... Please wait!</p>
}

else if (pagedData != null && pagedData.Any()) {

    @if (!string.IsNullOrWhiteSpace(searchTerm) && filteredData.Any())
    {
        <ul class="autocomplete-dropdown">
            @foreach (var game in filteredData)
            {
                <li class="autocomplete-item" @onclick="() => SelectGame(game.Name)">@game.Name</li>
            }
        </ul>
    }

    <div class="card-container">
        @foreach (var game in pagedData)
        {
            <div class="game-card">
                @if (!string.IsNullOrEmpty(game.Images?.Box?.Og))
                {
                    var gamePath = game.Images.Box.Og.Split("/o/")[0];
                    var gameName = game.Name.Replace(" ", "").ToLower();
                    var gameUrl = $"https://opencritic.com/{gamePath}/{gameName}";
                    var imageUrl = $"https://img.opencritic.com/{game.Images.Box.Og}";
                    <a href="@gameUrl">
                        <img src="@imageUrl" alt="@game.Name Box Art" class="game-image" />
                    </a>
                }
                else
                {
                    <img src="https://via.placeholder.com/120x150" alt="@game.Name Box Art" class="game-image" />
                }

                <div class="game-info">
                    <div class="name-release">
                        <a href="/gamedetail/@game.Id">
                            <h3>@game.Name</h3>
                        </a>
                        <span>Release Date: @game.FirstReleaseDate.ToString("dd-MMM-yyyy")</span>
                    </div>

                    <div class="critic-score">
                        <span><strong>Critic Score:</strong> <span class="score">@game.TopCriticScore</span></span>
                    </div>
                </div>

                <div class="platforms">
                    <div class="platform-list">
                        @foreach (var platform in game.Platforms)
                        {
                            <div class="platform-item">@platform.Name</div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="pagination-controls">
        <button @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
    </div>
}
else
{
    <p>No games available to score.</p>
}

@code {
    private List<Game>? hofData;
    private List<Game>? filteredData;
    private List<Game> pagedData;
    private bool loading = true;
    private int currentPage;
    private const int pageSize = 4;
    private string searchTerm = string.Empty;
    private string? error;

    protected override async Task OnInitializedAsync() {
        try {
            hofData = await OpenCriticAPI.HallOfFame();
            filteredData = hofData;
            currentPage = 1;
            UpdatePagedData();
        } catch (Exception e) {
            error = "ERROR: " + e.Message;
        } finally {
            loading = false;
        }
    }

    // amount of pages to find given the data
    private int totalPages => (int)Math.Ceiling((double)(filteredData?.Count ?? 0) / pageSize);

    private void OnSearchChanged(ChangeEventArgs e) {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;

        // no filter
        if (string.IsNullOrWhiteSpace(searchTerm)) {
            filteredData = hofData;
        }
        else {
            filteredData = hofData.Where(game => game.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        UpdatePagedData();
    }

    private void SelectGame(string game) {
        searchTerm = game;
        filteredData = hofData.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        currentPage = 1;
        UpdatePagedData();
    }

    private void UpdatePagedData() {
        if (filteredData != null) {
            pagedData = filteredData.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        }
    }

    private void NextPage() {
        if (currentPage < totalPages) {
            currentPage++;
            UpdatePagedData();
        }
    }

    private void PreviousPage() {
        if (currentPage > 1) {
            currentPage--;
            UpdatePagedData();
        }
    }
}
