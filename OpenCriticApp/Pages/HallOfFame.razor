@page "/halloffame"
@inject OpenCriticService OpenCriticAPI;
@using OpenCriticApp.Models

<style>
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        padding: 20px;
        justify-content: flex-start;
        animation: fadeIn 0.8s ease forwards;
    }

    a {
        list-style-type: none;
        text-decoration: none;
        color: black;
        transition: color 0.3s ease
    }

        a:hover {
            color: #666;
        }

    .critic-score {
        margin-top: auto;
        font-weight: normal;
        font-size: 1rem;
        color: #666;
    }

        .critic-score .score {
            font-weight: bold;
            font-size: 1.2rem;
            color: black;
        }

    .game-info {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        gap: 10px;
        flex-grow: 1;
    }

    .game-card {
        display: flex;
        flex-direction: row;
        width: 100%;
        max-width: 700px;
        border: 1px solid lightgray;
        border-radius: 8px;
        padding: 16px;
        background-color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* animation */
        animation: fadeIn 1s ease forwards;
    }

        .game-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

    .game-image {
        width: 120px;
        height: auto;
        border-radius: 8px;
        margin-right: 16px;
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* animation */
    }

    .platforms {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: flex-end;
        margin-left: 20px;
    }

    .platform-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        justify-content: flex-end; /* platforms are still messy */
    }

    .platform-item {
        background-color: #f1f1f1;
        padding: 5px 10px;
        border-radius: 20px;
        border: 1px solid #ccc;
        font-size: small;
        color: #333;
    }

    .year {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        margin: auto;
        gap: 10px;
        margin-bottom: 15px;
    }

    #year {
        border-radius: 0.4em;
        font-size: 18px;
        padding: 8px; 
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); 
        transition: all 0.3s ease;
    }

    #year:hover {
        border-color: #666; 
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
    }

    #year-button {
        padding: 8px 16px;
        border-radius: 0.4em;
        font-size: 16px;
        background-color: lightgray;
        color: #666;
        border: none;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
    }

    #year-button:hover {
        background-color: darkgray;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
    }

    #year-button:active {
        background-color: gray;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); 
        transform: scale(0.98);
    }

    .alert {
        max-width: 400px;
        max-height: 60px;
        justify-content: center;
        display: block;
        margin-top: 20px !important;
        margin: auto !important;
        text-align: center;
    }
</style>

<h1 class="text-center">Hall of Fame</h1>

<div class="year">
    <select id="year" @bind="selectedYear" label="Select Year: ">
        @for (int i = 2016; i <= 2024; i++) {
            <option value="@i">@i</option>
        }
    </select>
    <button id="year-button" @onclick="OnInitializedAsync"><i class="oi oi-magnifying-glass"></i></button>
</div>

@if (loading) {
    <div class="alert alert-secondary" role="alert">
        <p>Please wait!</p>
    </div>
}

else if (hofData != null && hofData.Any()) {
    <div class="card-container">
        @foreach (var game in hofData) {
            <div class="game-card">
                @if (!string.IsNullOrEmpty(game.Images?.Box?.Og)) {
                    var gamePath = game.Images.Box.Og.Split("/o/")[0];
                    var gameName = game.Name.Replace(" ", "").ToLower();
                    var gameUrl = $"https://opencritic.com/{gamePath}/{gameName}";
                    var imageUrl = $"https://img.opencritic.com/{game.Images.Box.Og}";

                    <a href="@gameUrl">
                        <img src="@imageUrl" alt="@game.Name Box Art" class="game-image" />
                    </a>
                } else {
                    <img src="https://via.placeholder.com/120x150" alt="@game.Name Box Art" class="game-image" />
                }

                <div class="game-info">
                    <div class="name-release">
                        <a href="/gamedetail/@game.Id">
                            <h3>@game.Name</h3>
                        </a>
                        <span>Release Date: @game.FirstReleaseDate.ToString("dd-MMM-yyyy")</span>
                    </div>

                    <div class="critic-score">
                        <span><strong>Critic Score:</strong> <span class="score">@game.TopCriticScore</span></span>
                    </div>
                </div>

                <div class="platforms">
                    <div class="platform-list">
                        @foreach (var platform in game.Platforms) {
                            <div class="platform-item">@platform.Name</div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

else {
    <p>No Hall of Fame games available for @selectedYear.</p>
}


@code {
    private List<Game>? hofData;
    private bool loading = true;
    private string? error;
    private int selectedYear = 2020;
    private int currentPage = 1;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync() {
        loading = true;
        try {
            Console.WriteLine($"Fetching Hall of Fame data for year: {selectedYear}"); // Debugging statement
            hofData = await OpenCriticAPI.HallOfFameByYear(selectedYear);
        }
        catch (Exception e) {
            error = "ERROR: " + e.Message;
        }
        finally {
            loading = false;
        }
    }
}