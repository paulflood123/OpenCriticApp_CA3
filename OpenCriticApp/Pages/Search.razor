@page "/search"
@inject OpenCriticService OpenCriticAPI
@using OpenCriticApp.Models

<style>
    .game-type-pill {
        display: inline-block;
        background-color: #e0e0e0;
        color: #333;
        font-size: 0.9em;
        font-weight: bold;
        padding: 5px 10px;
        border-radius: 20px;
        margin-bottom: 10px;
    }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        padding: 20px;
        justify-content: flex-start;
    }

    .game-card {
        display: flex;
        flex-direction: column;
        width: 100%;
        max-width: 400px;
        border: 1px solid lightgray;
        border-radius: 8px;
        padding: 16px;
        background-color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .game-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .game-info h3 {
        margin: 10px 0;
        font-size: 1.2rem;
    }

    a {
        list-style-type: none;
        text-decoration: none;
        color: black;
        transition: color 0.3s ease
    }

    a:hover {
        color: #666;
    }
</style>


<h1>Search Games</h1>

<input @bind="searchQuery" placeholder="Search for games..." />
<button @onclick="PerformSearch" name="search">Search</button>

@if (loading) {
    <p>Loading...</p>
}
else if (searchResults?.Any() == true) {
    <div class="card-container">
        @foreach (var game in searchResults) {
            var gameUrl = $"/gamedetail/{game.Id}";
            <div class="game-card">
                <div class="game-info">
                    <div class="game-type-pill">
                        @game.Relation.ToUpper()
                    </div>
                    <a href="@gameUrl">
                        <h3>@game.Name</h3>
                    </a>
                </div>
            </div>
        }
    </div>

} else if (!string.IsNullOrEmpty(error)) {
    <p class="error">@error</p>
} else {
    <p>No results found.</p>
}

@code {
    private string searchQuery = string.Empty;
    private List<SearchResult>? searchResults;
    private bool loading = false;
    private string? error;

    private async Task PerformSearch() {
        loading = true;
        error = null;
        searchResults = null;
        try {
            searchResults = await OpenCriticAPI.SearchGames(searchQuery);
        }
        catch (Exception e) {
            error = e.Message;
        }
        finally {
            loading = false;
        }
    }
}
